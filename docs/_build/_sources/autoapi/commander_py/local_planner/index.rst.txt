:py:mod:`commander_py.local_planner`
====================================

.. py:module:: commander_py.local_planner


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   commander_py.local_planner.LocalPlanner



Functions
~~~~~~~~~

.. autoapisummary::

   commander_py.local_planner.transform_paths



.. py:class:: LocalPlanner(num_paths, path_offset, circle_offsets, circle_radii, path_select_weight, time_gap, a_max, slow_speed, stop_line_buffer)

   .. py:method:: get_goal_state_set(goal_index, goal_state, waypoints, ego_state)

      Gets the goal states given a goal position.

      Gets the goal states given a goal position. The states 

      args:
          goal_index: Goal index for the vehicle to reach
              i.e. waypoints[goal_index] gives the goal waypoint
          goal_state: Goal state for the vehicle to reach (global frame)
              format: [x_goal, y_goal, v_goal], in units [m, m, m/s]
          waypoints: current waypoints to track. length and speed in m and m/s.
              (includes speed to track at each x,y location.) (global frame)
              format: [[x0, y0, v0],
                       [x1, y1, v1],
                       ...
                       [xn, yn, vn]]
              example:
                  waypoints[2][1]: 
                  returns the 3rd waypoint's y position

                  waypoints[5]:
                  returns [x5, y5, v5] (6th waypoint)
          ego_state: ego state vector for the vehicle, in the global frame.
              format: [ego_x, ego_y, ego_yaw, ego_open_loop_speed]
                  ego_x and ego_y     : position (m)
                  ego_yaw             : top-down orientation [-pi to pi]
                  ego_open_loop_speed : open loop speed (m/s)
      returns:
          goal_state_set: Set of goal states (offsetted laterally from one
              another) to be used by the local planner to plan multiple
              proposal paths. This goal state set is in the vehicle frame.
              format: [[x0, y0, t0, v0],
                       [x1, y1, t1, v1],
                       ...
                       [xm, ym, tm, vm]]
              , where m is the total number of goal states
                [x, y, t] are the position and yaw values at each goal
                v is the goal speed at the goal point.
                all units are in m, m/s and radians


   .. py:method:: plan_paths(goal_state_set)

      Plans the path set using the polynomial spiral optimization.

      Plans the path set using polynomial spiral optimization to each of the
      goal states.

      args:
          goal_state_set: Set of goal states (offsetted laterally from one
              another) to be used by the local planner to plan multiple
              proposal paths. These goals are with respect to the vehicle
              frame.
              format: [[x0, y0, t0, v0],
                       [x1, y1, t1, v1],
                       ...
                       [xm, ym, tm, vm]]
              , where m is the total number of goal states
                [x, y, t] are the position and yaw values at each goal
                v is the goal speed at the goal point.
                all units are in m, m/s and radians
      returns:
          paths: A list of optimized spiral paths which satisfies the set of 
              goal states. A path is a list of points of the following format:
                  [x_points, y_points, t_points]:
                      x_points: List of x values (m) along the spiral
                      y_points: List of y values (m) along the spiral
                      t_points: List of yaw values (rad) along the spiral
                  Example of accessing the ith path, jth point's t value:
                      paths[i][2][j]
              Note that this path is in the vehicle frame, since the
              optimize_spiral function assumes this to be the case.
          path_validity: List of booleans classifying whether a path is valid
              (true) or not (false) for the local planner to traverse. Each ith
              path_validity corresponds to the ith path in the path list.



.. py:function:: transform_paths(paths, ego_state)

   Converts the to the global coordinate frame.

   Converts the paths from the local (vehicle) coordinate frame to the
   global coordinate frame.

   args:
       paths: A list of paths in the local (vehicle) frame.  
           A path is a list of points of the following format:
               [x_points, y_points, t_points]:
                   , x_points: List of x values (m)
                   , y_points: List of y values (m)
                   , t_points: List of yaw values (rad)
               Example of accessing the ith path, jth point's t value:
                   paths[i][2][j]
       ego_state: ego state vector for the vehicle, in the global frame.
           format: [ego_x, ego_y, ego_yaw, ego_open_loop_speed]
               ego_x and ego_y     : position (m)
               ego_yaw             : top-down orientation [-pi to pi]
               ego_open_loop_speed : open loop speed (m/s)
   returns:
       transformed_paths: A list of transformed paths in the global frame.  
           A path is a list of points of the following format:
               [x_points, y_points, t_points]:
                   , x_points: List of x values (m)
                   , y_points: List of y values (m)
                   , t_points: List of yaw values (rad)
               Example of accessing the ith transformed path, jth point's 
               y value:
                   paths[i][1][j]


